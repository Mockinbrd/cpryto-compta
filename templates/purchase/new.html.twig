{% extends 'base.html.twig' %}

{% block title %}Purchase{% endblock %}

{% block body %}

    {% include('_components/_nav.html.twig') %}

    <div class="w-1/2 mx-auto">
        <div class="w-full xl:w-1/2 mx-auto">
            {{ form_start(form) }}
            <label for="purchase_cryptoId" class="block text-sm font-medium text-gray-700">Search for a coin</label>
            <div class="mt-1 flex rounded-md shadow-sm mb-12">
                <div class="relative w-full focus-within:z-10">
                    <div class="absolute inset-y-0 left-0 pl-2 flex items-center pointer-events-none">
                        <svg class="h-5 w-7 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path d="M0 0h24v24H0V0z" fill="none"/>
                            <path d="M15 4c-4.42 0-8 3.58-8 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6z"/>
                            <path d="M3 12c0-2.61 1.67-4.83 4-5.65V4.26C3.55 5.15 1 8.27 1 12s2.55 6.85 6 7.74v-2.09c-2.33-.82-4-3.04-4-5.65z"/>
                        </svg>
                    </div>
                    {{ form_widget(form.cryptoId, {
                        'attr' : {
                            'class' : 'h-10 focus:outline-none focus:ring focus:border-blue-300 block w-full rounded-md pl-12 sm:text-sm border-gray-300',
                            'placeholder' : 'Ex: Bitcoin'
                        }
                    }) }}
                </div>
            </div>
            <div id="list-result"></div>
            <label for="purchase_amountCrypto" class="block text-sm font-medium text-gray-700">Amount</label>
            <div class="mt-1 flex rounded-md shadow-sm mb-12">
                <div class="relative w-full focus-within:z-10">
                    <div class="absolute inset-y-0 left-0 pl-2 flex items-center pointer-events-none">
                        <svg class="h-5 w-7 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M0 0h24v24H0z" fill="none"/>
                            <path d="M21 18v1c0 1.1-.9 2-2 2H5c-1.11 0-2-.9-2-2V5c0-1.1.89-2 2-2h14c1.1 0 2 .9 2 2v1h-9c-1.11 0-2 .9-2 2v8c0 1.1.89 2 2 2h9zm-9-2h10V8H12v8zm4-2.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"/>
                        </svg>
                    </div>
                    {{ form_widget(form.amountCrypto, {
                        'attr' : {
                            'class' : 'h-10 focus:outline-none focus:ring focus:border-blue-300 block w-full rounded-md pl-12 sm:text-sm border-gray-300',
                            'placeholder' : 'Ex: 0.05189'
                        }
                    }) }}
                </div>
            </div>
            <label for="purchase_cryptoId" class="block text-sm font-medium text-gray-700">Purchase date (dd/mm/yyyy h:m)</label>
            <div class="mt-1 flex rounded-md shadow-sm mb-12">
                <div class="w-full focus-within:z-10">
                    <div class="flex items-center">
                        {{ form_widget(form.purchaseDateType) }}
                        {{ form_widget(form.purchaseTimeType) }}
                    </div>
                </div>
            </div>
            <button class="relative inline-flex items-center space-x-1 px-3 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-gray-50 hover:bg-gray-100 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500">
                <svg class="text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" height="24px" width="24px">
                    <path d="M0 0h24v24H0z" fill="none"/>
                    <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                </svg>
                <span>Add</span>
            </button>
            {{ form_end(form) }}
        </div>
    </div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script type="text/javascript">

    document.addEventListener("DOMContentLoaded", function(event) {
        //do work
        function autocomplete(inp, arr) {
            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted values:*/
            let currentFocus;
            /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function(e) {
                let a, b, i, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) { return false;}
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items bg-white");
                /*append the DIV element as a child of the autocomplete container:*/
                document.getElementById('list-result').appendChild(a);
                // this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    if (arr[i]['id'].toUpperCase().includes(val.toUpperCase()) ) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = arr[i]['id'];
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value=\"" + arr[i]['id'] + "\">";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function(e) {
                            /*insert the value for the autocomplete text field:*/
                            console.log(this.getElementsByTagName("input")[0]);
                            inp.value = this.getElementsByTagName("input")[0].value;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            })
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function(e) {
                let x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode === 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode === 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode === 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (let i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                let x = document.getElementsByClassName("autocomplete-items");
                for (let i = 0; i < x.length; i++) {
                    if (elmnt !== x[i] && elmnt !== inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

        let data = {{ coins|raw }};

        autocomplete(document.getElementById("purchase_cryptoId"), data);
    });

    </script>

{% endblock %}
